package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	graph "Gographql/graph/generated"
	"Gographql/graph/model"
	"context"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) AddMobile(ctx context.Context, input model.NewMobile) (*model.Mobile, error) {
	return r.MobileProcessor.AddMobile(ctx, input)
}

// UpdateMobile is the resolver for Update mobile field
func (r *mutationResolver) UpdateMobile(ctx context.Context, input model.NewMobile) (*model.Mobile, error) {
	return r.MobileProcessor.UpdateMobile(ctx, input)
}

// Brands is the resolver for the Brands field.
func (r *queryResolver) Brands(ctx context.Context) ([]*model.Brand, error) {
	return r.BrandProcessor.GetBrands(ctx)
}

// Mobiles is the resolver for the Mobiles field.
func (r *queryResolver) Mobiles(ctx context.Context) ([]*model.Mobile, error) {
	res, _ := r.MobileProcessor.GetMobiles(ctx)
	return res, nil
}

// Mobiles is the resolver for the Mobiles field.
func (r *queryResolver) Mobile(ctx context.Context, name string) (*model.Mobile, error) {
	return r.MobileProcessor.GetMobileByName(ctx, name)
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
